window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "py_obs_controller", "modulename": "py_obs_controller", "type": "module", "doc": "<p></p>\n"}, {"fullname": "py_obs_controller.example_used", "modulename": "py_obs_controller", "qualname": "example_used", "type": "function", "doc": "<div class=\"pdoc-code codehilite\"><pre><span></span><code><span class=\"kn\">from</span> <span class=\"nn\">py_obs_controller.obs_controller</span> <span class=\"kn\">import</span> <span class=\"n\">ObsController</span>\n\n<span class=\"c1\"># Replace these values with your OBS Studio host, port, and password</span>\n<span class=\"n\">HOST</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;127.0.0.1&#39;</span>\n<span class=\"n\">PORT</span> <span class=\"o\">=</span> <span class=\"mi\">4444</span>\n<span class=\"n\">PASSWORD</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;your_password_here&#39;</span>\n\n<span class=\"c1\"># Create an instance of ObsController with the host, port, and password</span>\n<span class=\"n\">obs_controller</span> <span class=\"o\">=</span> <span class=\"n\">ObsController</span><span class=\"p\">(</span><span class=\"n\">HOST</span><span class=\"p\">,</span> <span class=\"n\">PORT</span><span class=\"p\">,</span> <span class=\"n\">PASSWORD</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Connect to OBS Studio</span>\n<span class=\"n\">obs_controller</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Disable a source</span>\n<span class=\"n\">scene_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Scene1&#39;</span>\n<span class=\"n\">source_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Source1&#39;</span>\n<span class=\"n\">obs_controller</span><span class=\"o\">.</span><span class=\"n\">source</span><span class=\"o\">.</span><span class=\"n\">set_enabled</span><span class=\"p\">(</span><span class=\"n\">scene_name</span><span class=\"p\">,</span> <span class=\"n\">source_name</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Change to another scene</span>\n<span class=\"n\">new_scene_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Scene2&#39;</span>\n<span class=\"n\">obs_controller</span><span class=\"o\">.</span><span class=\"n\">scenes</span><span class=\"o\">.</span><span class=\"n\">set_current</span><span class=\"p\">(</span><span class=\"n\">new_scene_name</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Mute a microphone input</span>\n<span class=\"n\">mic_input_name</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;Microphone&#39;</span>\n<span class=\"n\">obs_controller</span><span class=\"o\">.</span><span class=\"n\">inputs</span><span class=\"o\">.</span><span class=\"n\">set_muted</span><span class=\"p\">(</span><span class=\"n\">mic_input_name</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</code></pre></div>\n", "signature": "()", "funcdef": "def"}, {"fullname": "py_obs_controller.filter_controller", "modulename": "py_obs_controller.filter_controller", "type": "module", "doc": "<p></p>\n"}, {"fullname": "py_obs_controller.filter_controller.FilterController", "modulename": "py_obs_controller.filter_controller", "qualname": "FilterController", "type": "class", "doc": "<p></p>\n"}, {"fullname": "py_obs_controller.filter_controller.FilterController.__init__", "modulename": "py_obs_controller.filter_controller", "qualname": "FilterController.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, obs_controller: obsws_python.reqs.ReqClient)", "funcdef": "def"}, {"fullname": "py_obs_controller.filter_controller.FilterController.get_list", "modulename": "py_obs_controller.filter_controller", "qualname": "FilterController.get_list", "type": "function", "doc": "<p>Returns a list of filters attached to the specified source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source_name</strong>:  The name of the source to retrieve filters for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of filter objects.</p>\n</blockquote>\n", "signature": "(self, source_name: str) -> list", "funcdef": "def"}, {"fullname": "py_obs_controller.filter_controller.FilterController.get_default_settings", "modulename": "py_obs_controller.filter_controller", "qualname": "FilterController.get_default_settings", "type": "function", "doc": "<p>Retrieves the default settings for a specified filter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>filter_kind</strong>:  The type of filter to retrieve default settings for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary containing the default settings for the filter.</p>\n</blockquote>\n", "signature": "(self, filter_kind: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.filter_controller.FilterController.create", "modulename": "py_obs_controller.filter_controller", "qualname": "FilterController.create", "type": "function", "doc": "<p>Creates a new filter and attaches it to the specified source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source_name</strong>:  The name of the source to attach the filter to.</li>\n<li><strong>filter_name</strong>:  The name to give the new filter.</li>\n<li><strong>filter_kind</strong>:  The type of filter to create.</li>\n<li><strong>filter_settings</strong>:  Optional. A dictionary containing custom settings for the new filter.</li>\n</ul>\n", "signature": "(\n    self,\n    source_name: str,\n    filter_name: str,\n    filter_kind: str,\n    filter_settings: dict = None\n)", "funcdef": "def"}, {"fullname": "py_obs_controller.filter_controller.FilterController.remove", "modulename": "py_obs_controller.filter_controller", "qualname": "FilterController.remove", "type": "function", "doc": "<p>Removes the specified filter from the specified source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source_name</strong>:  The name of the source the filter is attached to.</li>\n<li><strong>filter_name</strong>:  The name of the filter to remove.</li>\n</ul>\n", "signature": "(self, source_name: str, filter_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.filter_controller.FilterController.set_name", "modulename": "py_obs_controller.filter_controller", "qualname": "FilterController.set_name", "type": "function", "doc": "<p>Renames the specified filter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source_name</strong>:  The name of the source the filter is attached to.</li>\n<li><strong>filter_name</strong>:  The current name of the filter.</li>\n<li><strong>new_filter_name</strong>:  The new name to give the filter.</li>\n</ul>\n", "signature": "(self, source_name: str, filter_name: str, new_filter_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.filter_controller.FilterController.get", "modulename": "py_obs_controller.filter_controller", "qualname": "FilterController.get", "type": "function", "doc": "<p>Retrieves the settings for the specified filter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source_name</strong>:  The name of the source the filter is attached to.</li>\n<li><strong>filter_name</strong>:  The name of the filter to retrieve settings for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary containing the current settings for the filter.</p>\n</blockquote>\n", "signature": "(self, source_name: str, filter_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.filter_controller.FilterController.set_index", "modulename": "py_obs_controller.filter_controller", "qualname": "FilterController.set_index", "type": "function", "doc": "<p>Sets the index of the specified filter within the source's filter list.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source_name</strong>:  The name of the source the filter is attached to.</li>\n<li><strong>filter_name</strong>:  The name of the filter to set the index for.</li>\n<li><strong>filter_index</strong>:  The new index to give the filter.</li>\n</ul>\n", "signature": "(self, source_name: str, filter_name: str, filter_index: int)", "funcdef": "def"}, {"fullname": "py_obs_controller.filter_controller.FilterController.set_settings", "modulename": "py_obs_controller.filter_controller", "qualname": "FilterController.set_settings", "type": "function", "doc": "<p>Sets the settings for the specified filter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source_name</strong>:  The name of the source the filter is attached to.</li>\n<li><strong>filter_name</strong>:  The name of the filter to set the settings for.</li>\n<li><strong>filter_settings</strong>:  A dictionary containing the new settings for the filter.</li>\n</ul>\n", "signature": "(\n    self,\n    source_name: str,\n    filter_name: str,\n    filter_settings: dict,\n    overlay: bool = True\n)", "funcdef": "def"}, {"fullname": "py_obs_controller.filter_controller.FilterController.get_enabled", "modulename": "py_obs_controller.filter_controller", "qualname": "FilterController.get_enabled", "type": "function", "doc": "<p>Returns whether the specified filter is enabled.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source_name</strong>:  The name of the source the filter is attached to.</li>\n<li><strong>filter_name</strong>:  The name of the filter to check.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if the filter is enabled, False otherwise.</p>\n</blockquote>\n", "signature": "(self, source_name: str, filter_name: str) -> bool", "funcdef": "def"}, {"fullname": "py_obs_controller.filter_controller.FilterController.set_enabled", "modulename": "py_obs_controller.filter_controller", "qualname": "FilterController.set_enabled", "type": "function", "doc": "<p>Enables or disables the specified filter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source_name</strong>:  The name of the source the filter is attached to.</li>\n<li><strong>filter_name</strong>:  The name of the filter to enable or disable.</li>\n<li><strong>enabled</strong>:  True to enable the filter, False to disable it.</li>\n</ul>\n", "signature": "(self, source_name: str, filter_name: str, enabled: bool)", "funcdef": "def"}, {"fullname": "py_obs_controller.general_controller", "modulename": "py_obs_controller.general_controller", "type": "module", "doc": "<p></p>\n"}, {"fullname": "py_obs_controller.general_controller.GeneralController", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController", "type": "class", "doc": "<p></p>\n"}, {"fullname": "py_obs_controller.general_controller.GeneralController.__init__", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController.__init__", "type": "function", "doc": "<p></p>\n", "signature": "(self, obs_controller: obsws_python.reqs.ReqClient)", "funcdef": "def"}, {"fullname": "py_obs_controller.general_controller.GeneralController.get_version", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController.get_version", "type": "function", "doc": "<p>Returns the version of the OBS server.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary containing the version information.</p>\n</blockquote>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "py_obs_controller.general_controller.GeneralController.get_stats", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController.get_stats", "type": "function", "doc": "<p>Returns statistics about the OBS instance.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary containing the statistics information.</p>\n</blockquote>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "py_obs_controller.general_controller.GeneralController.get_studio_mode_enabled", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController.get_studio_mode_enabled", "type": "function", "doc": "<p>Returns whether studio mode is currently enabled or not.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A boolean indicating whether studio mode is currently enabled.</p>\n</blockquote>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "py_obs_controller.general_controller.GeneralController.set_studio_mode_enabled", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController.set_studio_mode_enabled", "type": "function", "doc": "<p>Enables or disables studio mode.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>enabled</strong>:  A boolean indicating whether studio mode should be enabled.</li>\n</ul>\n", "signature": "(self, enabled: bool)", "funcdef": "def"}, {"fullname": "py_obs_controller.general_controller.GeneralController.create_profile", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController.create_profile", "type": "function", "doc": "<p>Creates a new profile in OBS.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>profile_name</strong>:  The name of the new profile.</li>\n</ul>\n", "signature": "(self, profile_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.general_controller.GeneralController.remove_profile", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController.remove_profile", "type": "function", "doc": "<p>Removes a profile from OBS.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>profile_name</strong>:  The name of the profile to remove.</li>\n</ul>\n", "signature": "(self, profile_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.general_controller.GeneralController.get_profile_list", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController.get_profile_list", "type": "function", "doc": "<p>Returns a list of all profiles in OBS.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of profiles.</p>\n</blockquote>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "py_obs_controller.general_controller.GeneralController.set_current_profile", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController.set_current_profile", "type": "function", "doc": "<p>Sets the current profile in OBS.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>profile_name</strong>:  The name of the profile to set as the current profile.</li>\n</ul>\n", "signature": "(self, profile_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.general_controller.GeneralController.get_scene_collection_list", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController.get_scene_collection_list", "type": "function", "doc": "<p>Returns a list of all scene collections in OBS.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of scene collections.</p>\n</blockquote>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "py_obs_controller.general_controller.GeneralController.create_scene_collection", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController.create_scene_collection", "type": "function", "doc": "<p>Creates a new scene collection in OBS.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_collection_name</strong>:  The name of the new scene collection.</li>\n</ul>\n", "signature": "(self, scene_collection_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.general_controller.GeneralController.set_current_scene_collection", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController.set_current_scene_collection", "type": "function", "doc": "<p>Sets the current scene collection in OBS.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_collection_name</strong>:  The name of the scene collection to set as the current scene collection.</li>\n</ul>\n", "signature": "(self, scene_collection_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.general_controller.GeneralController.get_profile_parameters", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController.get_profile_parameters", "type": "function", "doc": "<p>Returns the value of a profile parameter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>category</strong>:  The category of the parameter.</li>\n<li><strong>name</strong>:  The name of the parameter.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The value of the parameter.</p>\n</blockquote>\n", "signature": "(self, category: str, name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.general_controller.GeneralController.set_profile_parameters", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController.set_profile_parameters", "type": "function", "doc": "<p>Sets the value of a profile parameter.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>category</strong>:  The category of the parameter.</li>\n<li><strong>name</strong>:  The name of the parameter.</li>\n<li><strong>value</strong>:  The value to set the parameter to.</li>\n</ul>\n", "signature": "(self, category: str, name: str, value: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.general_controller.GeneralController.get_video_settings", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController.get_video_settings", "type": "function", "doc": "<p>Returns the current video settings.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary containing the video settings.</p>\n</blockquote>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "py_obs_controller.general_controller.GeneralController.set_video_settings", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController.set_video_settings", "type": "function", "doc": "<p>Sets the video settings.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>video_settings</strong>:  A dictionary containing the video settings.</li>\n</ul>\n", "signature": "(self, video_settings: dict)", "funcdef": "def"}, {"fullname": "py_obs_controller.general_controller.GeneralController.get_stream_settings", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController.get_stream_settings", "type": "function", "doc": "<p>Returns the current stream settings.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A tuple containing a dictionary containing the stream settings and a string containing the stream type.</p>\n</blockquote>\n", "signature": "(self) -> tuple", "funcdef": "def"}, {"fullname": "py_obs_controller.general_controller.GeneralController.set_stream_settings", "modulename": "py_obs_controller.general_controller", "qualname": "GeneralController.set_stream_settings", "type": "function", "doc": "<p>Sets the stream settings.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>stream_settings</strong>:  A dictionary containing the stream settings.</li>\n<li><strong>stream_type</strong>:  A string containing the stream type.</li>\n</ul>\n", "signature": "(self, stream_settings: dict, stream_type: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller", "modulename": "py_obs_controller.input_controller", "type": "module", "doc": "<p></p>\n"}, {"fullname": "py_obs_controller.input_controller.InputController", "modulename": "py_obs_controller.input_controller", "qualname": "InputController", "type": "class", "doc": "<p>A controller for managing OBS input sources. Input sources include various types of\nmedia sources, such as video, audio, images, and text. This controller provides\nmethods to create, modify, and delete input sources, as well as to manage their\nsettings and properties.</p>\n"}, {"fullname": "py_obs_controller.input_controller.InputController.__init__", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.__init__", "type": "function", "doc": "<p>Initializes the InputController with a reference to the OBS WebSocket client.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs_controller</strong>:  An instance of the OBS WebSocket client.</li>\n</ul>\n", "signature": "(self, obs_controller: obsws_python.reqs.ReqClient)", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.get_list", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.get_list", "type": "function", "doc": "<p>Returns a list of all input sources in the current OBS session.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of input sources.</p>\n</blockquote>\n", "signature": "(self) -> list", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.get_kind_list", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.get_kind_list", "type": "function", "doc": "<p>Returns a list of all available input source kinds in OBS. Input source kinds\ninclude types such as video capture devices, audio input/output captures, image\nsources, text sources, and more.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of input source kinds.</p>\n</blockquote>\n", "signature": "(self) -> list", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.create", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.create", "type": "function", "doc": "<p>Creates a new input source and adds it to the specified scene. The input source\nwill have the provided name, kind, and settings.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene to add the input source to.</li>\n<li><strong>input_name</strong>:  The name of the new input source.</li>\n<li><strong>input_kind</strong>:  The kind of the new input source (e.g., 'video_capture_device', 'audio_input_capture').</li>\n<li><strong>input_settings</strong>:  A dictionary containing the settings for the new input source.</li>\n<li><strong>scene_item_enabled</strong>:  A boolean indicating whether the input source should be enabled in the scene.</li>\n</ul>\n", "signature": "(\n    self,\n    scene_name: str,\n    input_name: str,\n    input_kind: str,\n    input_settings: dict,\n    scene_item_enabled: bool\n)", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.remove", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.remove", "type": "function", "doc": "<p>Removes an input source from the current OBS session.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_name</strong>:  The name of the input source to remove.</li>\n</ul>\n", "signature": "(self, input_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.set_name", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.set_name", "type": "function", "doc": "<p>Renames an existing input source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>old_name</strong>:  The current name of the input source.</li>\n<li><strong>new_name</strong>:  The new name to give the input source.</li>\n</ul>\n", "signature": "(self, old_name: str, new_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.get_default_settings", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.get_default_settings", "type": "function", "doc": "<p>Retrieves the default settings for a particular input source kind.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_kind</strong>:  The kind of the input source (e.g., 'video_capture_device', 'audio_input_capture').</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary containing the default settings for the input source kind.</p>\n</blockquote>\n", "signature": "(self, input_kind: str) -> dict", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.get_settings", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.get_settings", "type": "function", "doc": "<p>Retrieves the current settings for an input source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_name</strong>:  The name of the input source to retrieve settings for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary containing the current settings for the input source.</p>\n</blockquote>\n", "signature": "(self, input_name: str) -> dict", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.get_kind", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.get_kind", "type": "function", "doc": "<p>Retrieves the kind of an input source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_name</strong>:  The name of the input source to retrieve the kind of.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A string containing the kind of the input source.</p>\n</blockquote>\n", "signature": "(self, input_name: str) -> str", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.set_settings", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.set_settings", "type": "function", "doc": "<p>Updates the settings of an input source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_name</strong>:  The name of the input source to update the settings of.</li>\n<li><strong>input_settings</strong>:  A dictionary containing the new settings for the input source.</li>\n</ul>\n", "signature": "(self, input_name: str, input_settings: dict)", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.get_volume", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.get_volume", "type": "function", "doc": "<p>Retrieves the current volume multiplier for an input source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_name</strong>:  The name of the input source to retrieve the volume multiplier for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A float representing the current volume multiplier for the input source.</p>\n</blockquote>\n", "signature": "(self, input_name: str) -> float", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.set_volume", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.set_volume", "type": "function", "doc": "<p>Sets the volume multiplier for an input source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_name</strong>:  The name of the input source to set the volume multiplier for.</li>\n<li><strong>volume</strong>:  A float representing the new volume multiplier for the input source.</li>\n</ul>\n", "signature": "(self, input_name: str, volume: float)", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.get_volume_decibel", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.get_volume_decibel", "type": "function", "doc": "<p>Retrieves the current volume multiplier for an input source in decibels.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_name</strong>:  The name of the input source to retrieve the volume multiplier for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A float representing the current volume multiplier for the input source in decibels.</p>\n</blockquote>\n", "signature": "(self, input_name: str) -> float", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.set_volume_decibel", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.set_volume_decibel", "type": "function", "doc": "<p>Sets the volume multiplier for an input source in decibels.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_name</strong>:  The name of the input source to set the volume multiplier for.</li>\n<li><strong>volume</strong>:  A float representing the new volume multiplier for the input source in decibels.</li>\n</ul>\n", "signature": "(self, input_name: str, volume: float)", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.get_muted", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.get_muted", "type": "function", "doc": "<p>Retrieves whether an input source is currently muted or not.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_name</strong>:  The name of the input source to retrieve the muted status of.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A boolean indicating whether the input source is currently muted or not.</p>\n</blockquote>\n", "signature": "(self, input_name: str) -> bool", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.set_muted", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.set_muted", "type": "function", "doc": "<p>Sets the muted status of an input source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_name</strong>:  The name of the input source to set the muted status of.</li>\n<li><strong>muted</strong>:  A boolean indicating whether the input source should be muted or not.</li>\n</ul>\n", "signature": "(self, input_name: str, muted: bool)", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.toggle_muted", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.toggle_muted", "type": "function", "doc": "<p>Toggles the muted status of an input source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_name</strong>:  The name of the input source to toggle the muted status of.</li>\n</ul>\n", "signature": "(self, input_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.get_audio_balance", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.get_audio_balance", "type": "function", "doc": "<p>Retrieves the current audio balance for an input source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_name</strong>:  The name of the input source to retrieve the audio balance for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A float representing the current audio balance for the input source.</p>\n</blockquote>\n", "signature": "(self, input_name: str) -> float", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.set_audio_balance", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.set_audio_balance", "type": "function", "doc": "<p>Sets the audio balance for an input source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_name</strong>:  The name of the input source to set the audio balance for.</li>\n<li><strong>balance</strong>:  A float representing the new audio balance for the input source.</li>\n</ul>\n", "signature": "(self, input_name: str, balance: float)", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.get_audio_sync_offset", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.get_audio_sync_offset", "type": "function", "doc": "<p>Retrieves the current audio sync offset for an input source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_name</strong>:  The name of the input source to retrieve the audio sync offset for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>An integer representing the current audio sync offset for the input source.</p>\n</blockquote>\n", "signature": "(self, input_name: str) -> int", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.set_audio_sync_offset", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.set_audio_sync_offset", "type": "function", "doc": "<p>Sets the audio sync offset for an input source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_name</strong>:  The name of the input source to set the audio sync offset for.</li>\n<li><strong>offset</strong>:  An integer representing the new audio sync offset for the input source.</li>\n</ul>\n", "signature": "(self, input_name: str, offset: int)", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.get_audio_tracks", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.get_audio_tracks", "type": "function", "doc": "<p>Retrieves the current audio tracks for an input source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_name</strong>:  The name of the input source to retrieve the audio tracks for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of dictionaries containing the current audio tracks for the input source.</p>\n</blockquote>\n", "signature": "(self, input_name: str) -> dict", "funcdef": "def"}, {"fullname": "py_obs_controller.input_controller.InputController.set_audio_tracks", "modulename": "py_obs_controller.input_controller", "qualname": "InputController.set_audio_tracks", "type": "function", "doc": "<p>Sets the audio tracks for an input source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>input_name</strong>:  The name of the input source to set the audio tracks for.</li>\n<li><strong>tracks</strong>:  A list of dictionaries containing the new audio tracks for the input source.</li>\n</ul>\n", "signature": "(self, input_name: str, tracks: dict)", "funcdef": "def"}, {"fullname": "py_obs_controller.obs_controller", "modulename": "py_obs_controller.obs_controller", "type": "module", "doc": "<p></p>\n"}, {"fullname": "py_obs_controller.obs_controller.ObsController", "modulename": "py_obs_controller.obs_controller", "qualname": "ObsController", "type": "class", "doc": "<p>The main controller for interacting with OBS. It provides access to various controllers\nfor managing different aspects of OBS, such as sources, scenes, inputs, filters,\nrecording, streaming, and the virtual camera.</p>\n"}, {"fullname": "py_obs_controller.obs_controller.ObsController.__init__", "modulename": "py_obs_controller.obs_controller", "qualname": "ObsController.__init__", "type": "function", "doc": "<p>Initializes the ObsController with a connection to the OBS WebSocket server.</p>\n\n<ul>\n<li>source: A controller for managing OBS sources.</li>\n<li>record: A controller for managing OBS recording.</li>\n<li>stream: A controller for managing OBS streaming.</li>\n<li>filters: A controller for managing OBS filters.</li>\n<li>general: A controller for managing general OBS settings.</li>\n<li>virtual_camera: A controller for managing the OBS virtual camera.</li>\n<li>scenes: A controller for managing OBS scenes.</li>\n<li>inputs: A controller for managing OBS input sources.</li>\n</ul>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>host</strong>:  The IP address or hostname of the OBS WebSocket server.</li>\n<li><strong>port</strong>:  The port number for the OBS WebSocket server.</li>\n<li><strong>password</strong>:  The password for the OBS WebSocket server.</li>\n</ul>\n", "signature": "(self, host: str, port: int, password: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.record_controller", "modulename": "py_obs_controller.record_controller", "type": "module", "doc": "<p></p>\n"}, {"fullname": "py_obs_controller.record_controller.RecordController", "modulename": "py_obs_controller.record_controller", "qualname": "RecordController", "type": "class", "doc": "<p></p>\n"}, {"fullname": "py_obs_controller.record_controller.RecordController.__init__", "modulename": "py_obs_controller.record_controller", "qualname": "RecordController.__init__", "type": "function", "doc": "<p>Constructor for the RecordController class.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs_controller</strong>:  An instance of the obs.ReqClient class for communicating with the OBS WebSocket server.</li>\n</ul>\n", "signature": "(self, obs_controller: obsws_python.reqs.ReqClient)", "funcdef": "def"}, {"fullname": "py_obs_controller.record_controller.RecordController.get_status", "modulename": "py_obs_controller.record_controller", "qualname": "RecordController.get_status", "type": "function", "doc": "<p>Retrieves the current status of the recording.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary containing the status of the recording.</p>\n</blockquote>\n", "signature": "(self) -> dict", "funcdef": "def"}, {"fullname": "py_obs_controller.record_controller.RecordController.toggle", "modulename": "py_obs_controller.record_controller", "qualname": "RecordController.toggle", "type": "function", "doc": "<p>Toggles the recording on/off.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "py_obs_controller.record_controller.RecordController.start", "modulename": "py_obs_controller.record_controller", "qualname": "RecordController.start", "type": "function", "doc": "<p>Starts the recording.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "py_obs_controller.record_controller.RecordController.stop", "modulename": "py_obs_controller.record_controller", "qualname": "RecordController.stop", "type": "function", "doc": "<p>Stops the recording.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "py_obs_controller.record_controller.RecordController.toggle_pause", "modulename": "py_obs_controller.record_controller", "qualname": "RecordController.toggle_pause", "type": "function", "doc": "<p>Toggles pausing the recording on/off.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "py_obs_controller.record_controller.RecordController.pause", "modulename": "py_obs_controller.record_controller", "qualname": "RecordController.pause", "type": "function", "doc": "<p>Pauses the recording.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "py_obs_controller.record_controller.RecordController.resume", "modulename": "py_obs_controller.record_controller", "qualname": "RecordController.resume", "type": "function", "doc": "<p>Resumes the recording after it has been paused.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "py_obs_controller.record_controller.RecordController.get_directory", "modulename": "py_obs_controller.record_controller", "qualname": "RecordController.get_directory", "type": "function", "doc": "<p>Retrieves the directory where the recordings are being saved.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The directory where the recordings are being saved.</p>\n</blockquote>\n", "signature": "(self) -> str", "funcdef": "def"}, {"fullname": "py_obs_controller.scene_controller", "modulename": "py_obs_controller.scene_controller", "type": "module", "doc": "<p></p>\n"}, {"fullname": "py_obs_controller.scene_controller.SceneController", "modulename": "py_obs_controller.scene_controller", "qualname": "SceneController", "type": "class", "doc": "<p>A controller for managing OBS scenes. This controller provides methods to create, modify, and delete scenes,\nas well as to manage the current scene and its items.</p>\n"}, {"fullname": "py_obs_controller.scene_controller.SceneController.__init__", "modulename": "py_obs_controller.scene_controller", "qualname": "SceneController.__init__", "type": "function", "doc": "<p>Initializes the SceneController with a reference to the OBS WebSocket client.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs_controller</strong>:  An instance of the OBS WebSocket client.</li>\n</ul>\n", "signature": "(self, obs_controller: obsws_python.reqs.ReqClient)", "funcdef": "def"}, {"fullname": "py_obs_controller.scene_controller.SceneController.get", "modulename": "py_obs_controller.scene_controller", "qualname": "SceneController.get", "type": "function", "doc": "<p>Returns a list of all scenes in the current OBS session.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of scene names.</p>\n</blockquote>\n", "signature": "(self) -> list", "funcdef": "def"}, {"fullname": "py_obs_controller.scene_controller.SceneController.get_group", "modulename": "py_obs_controller.scene_controller", "qualname": "SceneController.get_group", "type": "function", "doc": "<p>Returns a list of all scenes in the specified group.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>group_name</strong>:  The name of the group to get scenes for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of scene names.</p>\n</blockquote>\n", "signature": "(self, group_name: str) -> list", "funcdef": "def"}, {"fullname": "py_obs_controller.scene_controller.SceneController.get_current", "modulename": "py_obs_controller.scene_controller", "qualname": "SceneController.get_current", "type": "function", "doc": "<p>Returns the name of the current program scene in OBS.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name of the current program scene.</p>\n</blockquote>\n", "signature": "(self) -> str", "funcdef": "def"}, {"fullname": "py_obs_controller.scene_controller.SceneController.set_current", "modulename": "py_obs_controller.scene_controller", "qualname": "SceneController.set_current", "type": "function", "doc": "<p>Sets the current program scene in OBS to the specified scene.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene to set as the current program scene.</li>\n</ul>\n", "signature": "(self, scene_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.scene_controller.SceneController.set_name", "modulename": "py_obs_controller.scene_controller", "qualname": "SceneController.set_name", "type": "function", "doc": "<p>Renames an existing scene in OBS.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>old_name</strong>:  The current name of the scene.</li>\n<li><strong>new_name</strong>:  The new name for the scene.</li>\n</ul>\n", "signature": "(self, old_name: str, new_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.scene_controller.SceneController.remove", "modulename": "py_obs_controller.scene_controller", "qualname": "SceneController.remove", "type": "function", "doc": "<p>Deletes an existing scene from OBS.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene to remove.</li>\n</ul>\n", "signature": "(self, scene_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.scene_controller.SceneController.create", "modulename": "py_obs_controller.scene_controller", "qualname": "SceneController.create", "type": "function", "doc": "<p>Creates a new scene in OBS with the specified name.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name for the new scene.</li>\n</ul>\n", "signature": "(self, scene_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.scene_controller.SceneController.get_items", "modulename": "py_obs_controller.scene_controller", "qualname": "SceneController.get_items", "type": "function", "doc": "<p>Returns a list of all items in the specified scene.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene to get items for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A list of scene items.</p>\n</blockquote>\n", "signature": "(self, scene_name: str) -> list", "funcdef": "def"}, {"fullname": "py_obs_controller.scene_controller.SceneController.get_current_preview", "modulename": "py_obs_controller.scene_controller", "qualname": "SceneController.get_current_preview", "type": "function", "doc": "<p>Returns the name of the current preview scene in OBS.\nif the preview scene is not set, raises an exception.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The name of the current preview scene.</p>\n</blockquote>\n", "signature": "(self) -> str", "funcdef": "def"}, {"fullname": "py_obs_controller.scene_controller.SceneController.set_current_preview", "modulename": "py_obs_controller.scene_controller", "qualname": "SceneController.set_current_preview", "type": "function", "doc": "<p>Sets the current preview scene in OBS to the specified scene.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene to set as the current preview scene.</li>\n</ul>\n", "signature": "(self, scene_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.scene_controller.SceneController.set_scene_transition_override", "modulename": "py_obs_controller.scene_controller", "qualname": "SceneController.set_scene_transition_override", "type": "function", "doc": "<p>Sets the transition override for the specified scene.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene to set the transition override for.</li>\n<li><strong>transition_name</strong>:  The name of the transition to use for the scene.</li>\n</ul>\n", "signature": "(self, scene_name: str, transition_name: str, duration: int = 0)", "funcdef": "def"}, {"fullname": "py_obs_controller.scene_controller.SceneController.get_scene_transition_override", "modulename": "py_obs_controller.scene_controller", "qualname": "SceneController.get_scene_transition_override", "type": "function", "doc": "<p>Returns the transition override for the specified scene.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene to get the transition override for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary containing the transition override for the specified scene.</p>\n</blockquote>\n", "signature": "(self, scene_name: str) -> dict", "funcdef": "def"}, {"fullname": "py_obs_controller.source_controller", "modulename": "py_obs_controller.source_controller", "type": "module", "doc": "<p></p>\n"}, {"fullname": "py_obs_controller.source_controller.SourceController", "modulename": "py_obs_controller.source_controller", "qualname": "SourceController", "type": "class", "doc": "<p>A class for controlling sources in a given OBS scene.</p>\n"}, {"fullname": "py_obs_controller.source_controller.SourceController.__init__", "modulename": "py_obs_controller.source_controller", "qualname": "SourceController.__init__", "type": "function", "doc": "<p>Initializes the SourceController object with an OBS controller instance.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs_controller</strong>:  An instance of the ObsController class.</li>\n</ul>\n", "signature": "(self, obs_controller: obsws_python.reqs.ReqClient)", "funcdef": "def"}, {"fullname": "py_obs_controller.source_controller.SourceController.get_id", "modulename": "py_obs_controller.source_controller", "qualname": "SourceController.get_id", "type": "function", "doc": "<p>Gets the scene item ID for the specified source in the specified scene.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene the source is in.</li>\n<li><strong>source_name</strong>:  The name of the source.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The scene item ID for the source.</p>\n</blockquote>\n", "signature": "(self, scene_name: str, source_name: str) -> int", "funcdef": "def"}, {"fullname": "py_obs_controller.source_controller.SourceController.remove", "modulename": "py_obs_controller.source_controller", "qualname": "SourceController.remove", "type": "function", "doc": "<p>Removes the specified source from the specified scene.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene the source is in.</li>\n<li><strong>source_name</strong>:  The name of the source to remove.</li>\n</ul>\n", "signature": "(self, scene_name: str, source_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.source_controller.SourceController.get_index", "modulename": "py_obs_controller.source_controller", "qualname": "SourceController.get_index", "type": "function", "doc": "<p>Gets the index of the specified source in the specified scene.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene the source is in.</li>\n<li><strong>source_name</strong>:  The name of the source.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>The index of the source in the scene.</p>\n</blockquote>\n", "signature": "(self, scene_name: str, source_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.source_controller.SourceController.set_index", "modulename": "py_obs_controller.source_controller", "qualname": "SourceController.set_index", "type": "function", "doc": "<p>Sets the index of the specified source in the specified scene.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene the source is in.</li>\n<li><strong>source_name</strong>:  The name of the source.</li>\n<li><strong>index</strong>:  The new index for the source in the scene.</li>\n</ul>\n", "signature": "(self, scene_name: str, source_name: str, index: int)", "funcdef": "def"}, {"fullname": "py_obs_controller.source_controller.SourceController.get_locked", "modulename": "py_obs_controller.source_controller", "qualname": "SourceController.get_locked", "type": "function", "doc": "<p>Gets the locked status of the specified source in the specified scene.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene the source is in.</li>\n<li><strong>source_name</strong>:  The name of the source.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if the source is locked in the scene, False otherwise.</p>\n</blockquote>\n", "signature": "(self, scene_name: str, source_name: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.source_controller.SourceController.set_locked", "modulename": "py_obs_controller.source_controller", "qualname": "SourceController.set_locked", "type": "function", "doc": "<p>Sets the locked status of the specified source in the specified scene.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene the source is in.</li>\n<li><strong>source_name</strong>:  The name of the source.</li>\n<li><strong>locked</strong>:  True to lock the source in the scene, False to unlock it.</li>\n</ul>\n", "signature": "(self, scene_name: str, source_name: str, locked: bool)", "funcdef": "def"}, {"fullname": "py_obs_controller.source_controller.SourceController.get_enabled", "modulename": "py_obs_controller.source_controller", "qualname": "SourceController.get_enabled", "type": "function", "doc": "<p>Obtains the current enabled status of a source within a scene.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene that contains the source.</li>\n<li><strong>source_name</strong>:  The name of the source to retrieve the enabled status for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A boolean value indicating whether the source is currently enabled within the scene.</p>\n</blockquote>\n", "signature": "(self, scene_name: str, source_name: str) -> bool", "funcdef": "def"}, {"fullname": "py_obs_controller.source_controller.SourceController.set_enabled", "modulename": "py_obs_controller.source_controller", "qualname": "SourceController.set_enabled", "type": "function", "doc": "<p>Sets the enabled status of a source within a scene.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene that contains the source.</li>\n<li><strong>source_name</strong>:  The name of the source to set the enabled status for.</li>\n<li><strong>enabled</strong>:  A boolean value indicating whether to enable or disable the source.</li>\n</ul>\n", "signature": "(self, scene_name: str, source_name: str, enabled: bool)", "funcdef": "def"}, {"fullname": "py_obs_controller.source_controller.SourceController.get_transform", "modulename": "py_obs_controller.source_controller", "qualname": "SourceController.get_transform", "type": "function", "doc": "<p>Retrieves the current transformation properties for a source within a scene.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene that contains the source.</li>\n<li><strong>source_name</strong>:  The name of the source to retrieve the transformation properties for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary containing the current transformation properties for the source.</p>\n</blockquote>\n", "signature": "(self, scene_name: str, source_name: str) -> dict", "funcdef": "def"}, {"fullname": "py_obs_controller.source_controller.SourceController.set_transform", "modulename": "py_obs_controller.source_controller", "qualname": "SourceController.set_transform", "type": "function", "doc": "<p>Sets the transformation properties for a source within a scene.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene that contains the source.</li>\n<li><strong>source_name</strong>:  The name of the source to set the transformation properties for.</li>\n<li><strong>transform</strong>:  A dictionary containing the new transformation properties for the source.</li>\n</ul>\n", "signature": "(self, scene_name: str, source_name: str, transform: dict)", "funcdef": "def"}, {"fullname": "py_obs_controller.source_controller.SourceController.get_blend_mode", "modulename": "py_obs_controller.source_controller", "qualname": "SourceController.get_blend_mode", "type": "function", "doc": "<p>Retrieves the current blend mode for a source within a scene.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene that contains the source.</li>\n<li><strong>source_name</strong>:  The name of the source to retrieve the blend mode for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A string representing the current blend mode of the source.</p>\n</blockquote>\n", "signature": "(self, scene_name: str, source_name: str) -> str", "funcdef": "def"}, {"fullname": "py_obs_controller.source_controller.SourceController.set_blend_mode", "modulename": "py_obs_controller.source_controller", "qualname": "SourceController.set_blend_mode", "type": "function", "doc": "<p>Sets the blend mode for a source within a scene.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>scene_name</strong>:  The name of the scene that contains the source.</li>\n<li><strong>source_name</strong>:  The name of the source to set the blend mode for.</li>\n<li><strong>blend_mode</strong>:  A string representing the new blend mode for the source.</li>\n</ul>\n", "signature": "(self, scene_name: str, source_name: str, blend_mode: str)", "funcdef": "def"}, {"fullname": "py_obs_controller.source_controller.SourceController.get_screenshot", "modulename": "py_obs_controller.source_controller", "qualname": "SourceController.get_screenshot", "type": "function", "doc": "<p>Retrieves a screenshot of a source.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>name</strong>:  Name of the source to take a screenshot of</li>\n<li><strong>format</strong>:  Image compression format to use. Use GetVersion to get compatible image formats</li>\n<li><strong>width</strong>:  Width to scale the screenshot to (&gt;= 8, &lt;= 4096). If not specified, full resolution will be used.</li>\n<li><strong>height</strong>:  Height to scale the screenshot to (&gt;= 8, &lt;= 4096). If not specified, full resolution will be used.</li>\n<li><strong>quality</strong>:  Compression quality to use. 0 for high compression, 100 for uncompressed. -1 to use \"default\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A byte array containing the screenshot data, or None if the screenshot cannot be retrieved.</p>\n</blockquote>\n", "signature": "(\n    self,\n    name: str,\n    img_format: str,\n    width: int = None,\n    height: int = None,\n    quality: int = -1\n) -> bytes", "funcdef": "def"}, {"fullname": "py_obs_controller.source_controller.SourceController.save_source_screenshot", "modulename": "py_obs_controller.source_controller", "qualname": "SourceController.save_source_screenshot", "type": "function", "doc": "<p>Saves a screenshot of a source to a file.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>source_name</strong>:  Name of the source to take a screenshot of</li>\n<li><strong>image_format</strong>:  Image compression format to use. Use GetVersion to get compatible image formats</li>\n<li><strong>image_file_path</strong>:  Path to the file to save the screenshot to</li>\n<li><strong>image_width</strong>:  Width to scale the screenshot to (&gt;= 8, &lt;= 4096). If not specified, full resolution will be used.</li>\n<li><strong>image_height</strong>:  Height to scale the screenshot to (&gt;= 8, &lt;= 4096). If not specified, full resolution will be used.</li>\n<li><strong>image_compression_quality</strong>:  Compression quality to use. 0 for high compression, 100 for uncompressed. -1 to use \"default\"</li>\n</ul>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>True if the screenshot was saved successfully, False otherwise.</p>\n</blockquote>\n", "signature": "(\n    self,\n    source_name: str,\n    image_format: str,\n    image_file_path: str,\n    image_width: int = None,\n    image_height: int = None,\n    image_compression_quality: int = -1\n) -> bool", "funcdef": "def"}, {"fullname": "py_obs_controller.stream_controller", "modulename": "py_obs_controller.stream_controller", "type": "module", "doc": "<p></p>\n"}, {"fullname": "py_obs_controller.stream_controller.StreamController", "modulename": "py_obs_controller.stream_controller", "qualname": "StreamController", "type": "class", "doc": "<p>A controller for managing OBS stream. This controller provides methods to\nget status and toggle on/off the stream.</p>\n"}, {"fullname": "py_obs_controller.stream_controller.StreamController.__init__", "modulename": "py_obs_controller.stream_controller", "qualname": "StreamController.__init__", "type": "function", "doc": "<p>Initializes the StreamController with a reference to the OBS WebSocket client.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs_controller</strong>:  An instance of the OBS WebSocket client.</li>\n</ul>\n", "signature": "(self, obs_controller: obsws_python.reqs.ReqClient)", "funcdef": "def"}, {"fullname": "py_obs_controller.stream_controller.StreamController.get_status", "modulename": "py_obs_controller.stream_controller", "qualname": "StreamController.get_status", "type": "function", "doc": "<p>Gets the current status of the stream.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary containing the current status of the stream.</p>\n</blockquote>\n", "signature": "(self) -> dict", "funcdef": "def"}, {"fullname": "py_obs_controller.stream_controller.StreamController.toggle", "modulename": "py_obs_controller.stream_controller", "qualname": "StreamController.toggle", "type": "function", "doc": "<p>Toggles the stream on or off.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "py_obs_controller.stream_controller.StreamController.start", "modulename": "py_obs_controller.stream_controller", "qualname": "StreamController.start", "type": "function", "doc": "<p>Starts the stream.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "py_obs_controller.stream_controller.StreamController.stop", "modulename": "py_obs_controller.stream_controller", "qualname": "StreamController.stop", "type": "function", "doc": "<p>Stops the stream.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "py_obs_controller.virtual_camera_controller", "modulename": "py_obs_controller.virtual_camera_controller", "type": "module", "doc": "<p></p>\n"}, {"fullname": "py_obs_controller.virtual_camera_controller.VirtualCameraController", "modulename": "py_obs_controller.virtual_camera_controller", "qualname": "VirtualCameraController", "type": "class", "doc": "<p>A controller for managing OBS virtual camera. This controller provides methods to\nget status and toggle on/off the virtual camera.</p>\n"}, {"fullname": "py_obs_controller.virtual_camera_controller.VirtualCameraController.__init__", "modulename": "py_obs_controller.virtual_camera_controller", "qualname": "VirtualCameraController.__init__", "type": "function", "doc": "<p>Initializes the VirtualCameraController with a reference to the OBS WebSocket client.</p>\n\n<h6 id=\"parameters\">Parameters</h6>\n\n<ul>\n<li><strong>obs_controller</strong>:  An instance of the OBS WebSocket client.</li>\n</ul>\n", "signature": "(self, obs_controller: obsws_python.reqs.ReqClient)", "funcdef": "def"}, {"fullname": "py_obs_controller.virtual_camera_controller.VirtualCameraController.get_status", "modulename": "py_obs_controller.virtual_camera_controller", "qualname": "VirtualCameraController.get_status", "type": "function", "doc": "<p>Gets the current status of the virtual camera.</p>\n\n<h6 id=\"returns\">Returns</h6>\n\n<blockquote>\n  <p>A dictionary containing the current status of the virtual camera.</p>\n</blockquote>\n", "signature": "(self) -> dict", "funcdef": "def"}, {"fullname": "py_obs_controller.virtual_camera_controller.VirtualCameraController.toggle", "modulename": "py_obs_controller.virtual_camera_controller", "qualname": "VirtualCameraController.toggle", "type": "function", "doc": "<p>Toggles the virtual camera on or off.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "py_obs_controller.virtual_camera_controller.VirtualCameraController.start", "modulename": "py_obs_controller.virtual_camera_controller", "qualname": "VirtualCameraController.start", "type": "function", "doc": "<p>Starts the virtual camera.</p>\n", "signature": "(self)", "funcdef": "def"}, {"fullname": "py_obs_controller.virtual_camera_controller.VirtualCameraController.stop", "modulename": "py_obs_controller.virtual_camera_controller", "qualname": "VirtualCameraController.stop", "type": "function", "doc": "<p>Stops the virtual camera.</p>\n", "signature": "(self)", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();